{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts"],
  "sourcesContent": ["import { getHighlighter } from \"@shikijs/compat\";\r\nimport { defineDocumentType, makeSource } from \"contentlayer2/source-files\";\r\nimport { Element } from \"hast\";\r\nimport rehypeAutolinkHeadings from \"rehype-autolink-headings\";\r\nimport rehypePrettyCode from \"rehype-pretty-code\";\r\nimport rehypeSlug from \"rehype-slug\";\r\nimport { codeImport } from \"remark-code-import\";\r\nimport remarkGfm from \"remark-gfm\";\r\nimport { Plugin } from \"unified\";\r\n\r\nconst Post = defineDocumentType(() => ({\r\n  name: \"Post\",\r\n  filePathPattern: `post/**/*.mdx`,\r\n  contentType: \"mdx\",\r\n  fields: {\r\n    title: { type: \"string\", required: true },\r\n    description: { type: \"string\", required: true },\r\n    published: { type: \"boolean\", required: true },\r\n    date: { type: \"date\", required: true },\r\n    tags: { type: \"list\", of: { type: \"string\" } },\r\n  },\r\n  computedFields: {\r\n    slug: {\r\n      type: \"string\",\r\n      resolve: (doc) => {\r\n        console.log(\"doc is \", doc);\r\n        return doc._raw.flattenedPath;\r\n      },\r\n    },\r\n  },\r\n}));\r\n\r\nexport default makeSource({\r\n  contentDirPath: \"./content\",\r\n  documentTypes: [Post],\r\n  mdx: {\r\n    remarkPlugins: [remarkGfm, codeImport],\r\n    rehypePlugins: [\r\n      rehypeSlug as Plugin,\r\n      [\r\n        rehypePrettyCode,\r\n        {\r\n          theme: \"github-dark\",\r\n          getHighlighter,\r\n          onVisitLine(node: Element) {\r\n            if (node.children.length === 0) {\r\n              node.children = [{ type: \"text\", value: \" \" }];\r\n            }\r\n          },\r\n          onVisitHighlightedLine(node: Element) {\r\n            if (Array.isArray(node.properties.className)) {\r\n              node.properties.className.push(\"line--highlighted\");\r\n            } else {\r\n              node.properties.className = [\"line--highlighted\"];\r\n            }\r\n          },\r\n          onVisitHighlightedWord(node: Element) {\r\n            if (Array.isArray(node.properties.className)) {\r\n              node.properties.className = [\"word--highlighted\"];\r\n            } else {\r\n              node.properties.className = [\"word--highlighted\"];\r\n            }\r\n          },\r\n        },\r\n      ],\r\n      [\r\n        rehypeAutolinkHeadings as Plugin,\r\n        {\r\n          properties: {\r\n            className: [\"subheading-anchor\"],\r\n            ariaLabel: \"Link to section\",\r\n          },\r\n        },\r\n      ],\r\n    ],\r\n  },\r\n});\r\n"],
  "mappings": ";AAAA,SAAS,sBAAsB;AAC/B,SAAS,oBAAoB,kBAAkB;AAE/C,OAAO,4BAA4B;AACnC,OAAO,sBAAsB;AAC7B,OAAO,gBAAgB;AACvB,SAAS,kBAAkB;AAC3B,OAAO,eAAe;AAGtB,IAAM,OAAO,mBAAmB,OAAO;AAAA,EACrC,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACN,OAAO,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACxC,aAAa,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IAC9C,WAAW,EAAE,MAAM,WAAW,UAAU,KAAK;AAAA,IAC7C,MAAM,EAAE,MAAM,QAAQ,UAAU,KAAK;AAAA,IACrC,MAAM,EAAE,MAAM,QAAQ,IAAI,EAAE,MAAM,SAAS,EAAE;AAAA,EAC/C;AAAA,EACA,gBAAgB;AAAA,IACd,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,SAAS,CAAC,QAAQ;AAChB,gBAAQ,IAAI,WAAW,GAAG;AAC1B,eAAO,IAAI,KAAK;AAAA,MAClB;AAAA,IACF;AAAA,EACF;AACF,EAAE;AAEF,IAAO,8BAAQ,WAAW;AAAA,EACxB,gBAAgB;AAAA,EAChB,eAAe,CAAC,IAAI;AAAA,EACpB,KAAK;AAAA,IACH,eAAe,CAAC,WAAW,UAAU;AAAA,IACrC,eAAe;AAAA,MACb;AAAA,MACA;AAAA,QACE;AAAA,QACA;AAAA,UACE,OAAO;AAAA,UACP;AAAA,UACA,YAAY,MAAe;AACzB,gBAAI,KAAK,SAAS,WAAW,GAAG;AAC9B,mBAAK,WAAW,CAAC,EAAE,MAAM,QAAQ,OAAO,IAAI,CAAC;AAAA,YAC/C;AAAA,UACF;AAAA,UACA,uBAAuB,MAAe;AACpC,gBAAI,MAAM,QAAQ,KAAK,WAAW,SAAS,GAAG;AAC5C,mBAAK,WAAW,UAAU,KAAK,mBAAmB;AAAA,YACpD,OAAO;AACL,mBAAK,WAAW,YAAY,CAAC,mBAAmB;AAAA,YAClD;AAAA,UACF;AAAA,UACA,uBAAuB,MAAe;AACpC,gBAAI,MAAM,QAAQ,KAAK,WAAW,SAAS,GAAG;AAC5C,mBAAK,WAAW,YAAY,CAAC,mBAAmB;AAAA,YAClD,OAAO;AACL,mBAAK,WAAW,YAAY,CAAC,mBAAmB;AAAA,YAClD;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAAA,MACA;AAAA,QACE;AAAA,QACA;AAAA,UACE,YAAY;AAAA,YACV,WAAW,CAAC,mBAAmB;AAAA,YAC/B,WAAW;AAAA,UACb;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACF,CAAC;",
  "names": []
}
