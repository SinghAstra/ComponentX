{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts", "../../../lib/toc.ts"],
  "sourcesContent": ["import {\r\n  ComputedFields,\r\n  defineDocumentType,\r\n  defineNestedType,\r\n  makeSource,\r\n} from \"contentlayer2/source-files\";\r\nimport rehypeAutoLinkHeadings from \"rehype-autolink-headings\";\r\nimport rehypeSlug from \"rehype-slug\";\r\nimport remarkCodeImport from \"remark-code-import\";\r\nimport remarkGfm from \"remark-gfm\";\r\nimport { Plugin } from \"unified\";\r\nimport { extractHeadings } from \"./lib/toc\";\r\n\r\nconst computedFields: ComputedFields<\"Doc\"> = {\r\n  slug: {\r\n    type: \"string\",\r\n    resolve: (doc) => `/${doc._raw.flattenedPath}`,\r\n  },\r\n  slugAsParams: {\r\n    type: \"string\",\r\n    resolve: (doc) => doc._raw.flattenedPath.split(\"/\").slice(1).join(\"/\"),\r\n  },\r\n  headings: {\r\n    type: \"json\",\r\n    resolve: async (doc) => {\r\n      const headings = extractHeadings(doc.body.raw);\r\n      console.log(\"headings is \", headings);\r\n      return headings;\r\n    },\r\n  },\r\n};\r\n\r\nconst LinksProperties = defineNestedType(() => ({\r\n  name: \"LinksProperties\",\r\n  fields: {\r\n    doc: {\r\n      type: \"string\",\r\n    },\r\n    api: {\r\n      type: \"string\",\r\n    },\r\n  },\r\n}));\r\n\r\nexport const Doc = defineDocumentType(() => ({\r\n  name: \"Doc\",\r\n  filePathPattern: `docs/**/*.mdx`,\r\n  contentType: \"mdx\",\r\n  fields: {\r\n    title: {\r\n      type: \"string\",\r\n      required: true,\r\n    },\r\n    description: {\r\n      type: \"string\",\r\n      required: true,\r\n    },\r\n    published: {\r\n      type: \"boolean\",\r\n      default: true,\r\n    },\r\n    links: {\r\n      type: \"nested\",\r\n      of: LinksProperties,\r\n    },\r\n    featured: {\r\n      type: \"boolean\",\r\n      default: false,\r\n      required: false,\r\n    },\r\n    component: {\r\n      type: \"boolean\",\r\n      default: false,\r\n      required: false,\r\n    },\r\n    toc: {\r\n      type: \"boolean\",\r\n      default: true,\r\n      required: false,\r\n    },\r\n  },\r\n  computedFields,\r\n}));\r\n\r\nexport default makeSource({\r\n  contentDirPath: \"./content\",\r\n  documentTypes: [Doc],\r\n  mdx: {\r\n    remarkPlugins: [remarkGfm, remarkCodeImport],\r\n    rehypePlugins: [rehypeSlug as Plugin, rehypeAutoLinkHeadings as Plugin],\r\n  },\r\n});\r\n", "import { Heading } from \"@/types/heading\";\r\n\r\nexport function extractHeadings(source: string): Heading[] {\r\n  const headingLines = source\r\n    .split(\"\\n\")\r\n    .filter((line) => line.match(/^#{1,6}\\s/));\r\n\r\n  return headingLines\r\n    .map((raw) => {\r\n      const match = raw.match(/^(#{1,6})\\s+(.+)\\r?$/);\r\n      if (!match) return null;\r\n\r\n      const [, level, title] = match;\r\n\r\n      return {\r\n        level: level.length,\r\n        title: title,\r\n        id: title.toLowerCase().replace(/[^a-z0-9]+/g, \"-\"),\r\n      };\r\n    })\r\n    .filter((heading): heading is Heading => heading !== null);\r\n}\r\n"],
  "mappings": ";AAAA;AAAA,EAEE;AAAA,EACA;AAAA,EACA;AAAA,OACK;AACP,OAAO,4BAA4B;AACnC,OAAO,gBAAgB;AACvB,OAAO,sBAAsB;AAC7B,OAAO,eAAe;;;ACPf,SAAS,gBAAgB,QAA2B;AACzD,QAAM,eAAe,OAClB,MAAM,IAAI,EACV,OAAO,CAAC,SAAS,KAAK,MAAM,WAAW,CAAC;AAE3C,SAAO,aACJ,IAAI,CAAC,QAAQ;AACZ,UAAM,QAAQ,IAAI,MAAM,sBAAsB;AAC9C,QAAI,CAAC;AAAO,aAAO;AAEnB,UAAM,CAAC,EAAE,OAAO,KAAK,IAAI;AAEzB,WAAO;AAAA,MACL,OAAO,MAAM;AAAA,MACb;AAAA,MACA,IAAI,MAAM,YAAY,EAAE,QAAQ,eAAe,GAAG;AAAA,IACpD;AAAA,EACF,CAAC,EACA,OAAO,CAAC,YAAgC,YAAY,IAAI;AAC7D;;;ADRA,IAAM,iBAAwC;AAAA,EAC5C,MAAM;AAAA,IACJ,MAAM;AAAA,IACN,SAAS,CAAC,QAAQ,IAAI,IAAI,KAAK,aAAa;AAAA,EAC9C;AAAA,EACA,cAAc;AAAA,IACZ,MAAM;AAAA,IACN,SAAS,CAAC,QAAQ,IAAI,KAAK,cAAc,MAAM,GAAG,EAAE,MAAM,CAAC,EAAE,KAAK,GAAG;AAAA,EACvE;AAAA,EACA,UAAU;AAAA,IACR,MAAM;AAAA,IACN,SAAS,OAAO,QAAQ;AACtB,YAAM,WAAW,gBAAgB,IAAI,KAAK,GAAG;AAC7C,cAAQ,IAAI,gBAAgB,QAAQ;AACpC,aAAO;AAAA,IACT;AAAA,EACF;AACF;AAEA,IAAM,kBAAkB,iBAAiB,OAAO;AAAA,EAC9C,MAAM;AAAA,EACN,QAAQ;AAAA,IACN,KAAK;AAAA,MACH,MAAM;AAAA,IACR;AAAA,IACA,KAAK;AAAA,MACH,MAAM;AAAA,IACR;AAAA,EACF;AACF,EAAE;AAEK,IAAM,MAAM,mBAAmB,OAAO;AAAA,EAC3C,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACN,OAAO;AAAA,MACL,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,IACA,aAAa;AAAA,MACX,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,IACA,WAAW;AAAA,MACT,MAAM;AAAA,MACN,SAAS;AAAA,IACX;AAAA,IACA,OAAO;AAAA,MACL,MAAM;AAAA,MACN,IAAI;AAAA,IACN;AAAA,IACA,UAAU;AAAA,MACR,MAAM;AAAA,MACN,SAAS;AAAA,MACT,UAAU;AAAA,IACZ;AAAA,IACA,WAAW;AAAA,MACT,MAAM;AAAA,MACN,SAAS;AAAA,MACT,UAAU;AAAA,IACZ;AAAA,IACA,KAAK;AAAA,MACH,MAAM;AAAA,MACN,SAAS;AAAA,MACT,UAAU;AAAA,IACZ;AAAA,EACF;AAAA,EACA;AACF,EAAE;AAEF,IAAO,8BAAQ,WAAW;AAAA,EACxB,gBAAgB;AAAA,EAChB,eAAe,CAAC,GAAG;AAAA,EACnB,KAAK;AAAA,IACH,eAAe,CAAC,WAAW,gBAAgB;AAAA,IAC3C,eAAe,CAAC,YAAsB,sBAAgC;AAAA,EACxE;AACF,CAAC;",
  "names": []
}
