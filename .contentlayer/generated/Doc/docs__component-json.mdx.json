{
  "title": "components.json",
  "description": "Configuration for your project.\r",
  "published": true,
  "featured": false,
  "component": false,
  "toc": true,
  "body": {
    "raw": "\r\nThe `components.json` file holds configuration for your project.\r\n\r\nWe use it to understand how your project is set up and how to generate components customized for your project.\r\n\r\n<Callout className=\"mt-6\">\r\n  Note: The `components.json` file is optional and **only required if you're\r\n  using the CLI** to add components to your project. If you're using the copy\r\n  and paste method, you don't need this file.\r\n</Callout>\r\n\r\nYou can create a `components.json` file in your project by running the following command:\r\n\r\n```bash\r\nnpx shadcn@latest init\r\n```\r\n\r\nSee the <Link href=\"/docs/cli\">CLI section</Link> for more information.\r\n\r\n## $schema\r\n\r\nYou can see the JSON Schema for `components.json` [here](https://ui.shadcn.com/schema.json).\r\n\r\n```json title=\"components.json\"\r\n{\r\n  \"$schema\": \"https://ui.shadcn.com/schema.json\"\r\n}\r\n```\r\n\r\n## style\r\n\r\nThe style for your components. **This cannot be changed after initialization.**\r\n\r\n```json title=\"components.json\"\r\n{\r\n  \"style\": \"default\" | \"new-york\"\r\n}\r\n```\r\n\r\n<ComponentPreview name=\"card-with-form\" />\r\n\r\n## tailwind\r\n\r\nConfiguration to help the CLI understand how Tailwind CSS is set up in your project.\r\n\r\nSee the <Link href=\"/docs/installation\">installation section</Link> for how to set up Tailwind CSS.\r\n\r\n### tailwind.config\r\n\r\nPath to where your `tailwind.config.js` file is located.\r\n\r\n```json title=\"components.json\"\r\n{\r\n  \"tailwind\": {\r\n    \"config\": \"tailwind.config.js\" | \"tailwind.config.ts\"\r\n  }\r\n}\r\n```\r\n\r\n### tailwind.css\r\n\r\nPath to the CSS file that imports Tailwind CSS into your project.\r\n\r\n```json title=\"components.json\"\r\n{\r\n  \"tailwind\": {\r\n    \"css\": \"styles/global.css\"\r\n  }\r\n}\r\n```\r\n\r\n### tailwind.baseColor\r\n\r\nThis is used to generate the default color palette for your components. **This cannot be changed after initialization.**\r\n\r\n```json title=\"components.json\"\r\n{\r\n  \"tailwind\": {\r\n    \"baseColor\": \"gray\" | \"neutral\" | \"slate\" | \"stone\" | \"zinc\"\r\n  }\r\n}\r\n```\r\n\r\n### tailwind.cssVariables\r\n\r\nYou can choose between using CSS variables or Tailwind CSS utility classes for theming.\r\n\r\nTo use utility classes for theming set `tailwind.cssVariables` to `false`. For CSS variables, set `tailwind.cssVariables` to `true`.\r\n\r\n```json title=\"components.json\"\r\n{\r\n  \"tailwind\": {\r\n    \"cssVariables\": `true` | `false`\r\n  }\r\n}\r\n```\r\n\r\nFor more information, see the <Link href=\"/docs/theming\">theming docs</Link>.\r\n\r\n**This cannot be changed after initialization.** To switch between CSS variables and utility classes, you'll have to delete and re-install your components.\r\n\r\n### tailwind.prefix\r\n\r\nThe prefix to use for your Tailwind CSS utility classes. Components will be added with this prefix.\r\n\r\n```json title=\"components.json\"\r\n{\r\n  \"tailwind\": {\r\n    \"prefix\": \"tw-\"\r\n  }\r\n}\r\n```\r\n\r\n## rsc\r\n\r\nWhether or not to enable support for React Server Components.\r\n\r\nThe CLI automatically adds a `use client` directive to client components when set to `true`.\r\n\r\n```json title=\"components.json\"\r\n{\r\n  \"rsc\": `true` | `false`\r\n}\r\n```\r\n\r\n## tsx\r\n\r\nChoose between TypeScript or JavaScript components.\r\n\r\nSetting this option to `false` allows components to be added as JavaScript with the `.jsx` file extension.\r\n\r\n```json title=\"components.json\"\r\n{\r\n  \"tsx\": `true` | `false`\r\n}\r\n```\r\n\r\n## aliases\r\n\r\nThe CLI uses these values and the `paths` config from your `tsconfig.json` or `jsconfig.json` file to place generated components in the correct location.\r\n\r\nPath aliases have to be set up in your `tsconfig.json` or `jsconfig.json` file.\r\n\r\n<Callout className=\"mt-6\">\r\n  **Important:** If you're using the `src` directory, make sure it is included\r\n  under `paths` in your `tsconfig.json` or `jsconfig.json` file.\r\n</Callout>\r\n\r\n### aliases.utils\r\n\r\nImport alias for your utility functions.\r\n\r\n```json title=\"components.json\"\r\n{\r\n  \"aliases\": {\r\n    \"utils\": \"@/lib/utils\"\r\n  }\r\n}\r\n```\r\n\r\n### aliases.components\r\n\r\nImport alias for your components.\r\n\r\n```json title=\"components.json\"\r\n{\r\n  \"aliases\": {\r\n    \"components\": \"@/components\"\r\n  }\r\n}\r\n```\r\n\r\n### aliases.ui\r\n\r\nImport alias for `ui` components.\r\n\r\nThe CLI will use the `aliases.ui` value to determine where to place your `ui` components. Use this config if you want to customize the installation directory for your `ui` components.\r\n\r\n```json title=\"components.json\"\r\n{\r\n  \"aliases\": {\r\n    \"ui\": \"@/app/ui\"\r\n  }\r\n}\r\n```\r\n\r\n### aliases.lib\r\n\r\nImport alias for `lib` functions such as `format-date` or `generate-id`.\r\n\r\n```json title=\"components.json\"\r\n{\r\n  \"aliases\": {\r\n    \"lib\": \"@/lib\"\r\n  }\r\n}\r\n```\r\n\r\n### aliases.hooks\r\n\r\nImport alias for `hooks` such as `use-media-query` or `use-toast`.\r\n\r\n```json title=\"components.json\"\r\n{\r\n  \"aliases\": {\r\n    \"hooks\": \"@/hooks\"\r\n  }\r\n}\r\n```\r\n",
    "code": "var Component=(()=>{var u=Object.create;var s=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,w=Object.prototype.hasOwnProperty;var b=(i,n)=>()=>(n||i((n={exports:{}}).exports,n),n.exports),y=(i,n)=>{for(var r in n)s(i,r,{get:n[r],enumerable:!0})},l=(i,n,r,o)=>{if(n&&typeof n==\"object\"||typeof n==\"function\")for(let a of f(n))!w.call(i,a)&&a!==r&&s(i,a,{get:()=>n[a],enumerable:!(o=m(n,a))||o.enumerable});return i};var j=(i,n,r)=>(r=i!=null?u(g(i)):{},l(n||!i||!i.__esModule?s(r,\"default\",{value:i,enumerable:!0}):r,i)),x=i=>l(s({},\"__esModule\",{value:!0}),i);var d=b((k,t)=>{t.exports=_jsx_runtime});var I={};y(I,{default:()=>p,frontmatter:()=>N});var e=j(d()),N={title:\"components.json\",description:\"Configuration for your project.\"};function h(i){let n={a:\"a\",code:\"code\",h2:\"h2\",h3:\"h3\",p:\"p\",pre:\"pre\",span:\"span\",strong:\"strong\",...i.components},{Callout:r,ComponentPreview:o,Link:a}=n;return r||c(\"Callout\",!0),o||c(\"ComponentPreview\",!0),a||c(\"Link\",!0),(0,e.jsxs)(e.Fragment,{children:[(0,e.jsxs)(n.p,{children:[\"The \",(0,e.jsx)(n.code,{children:\"components.json\"}),\" file holds configuration for your project.\"]}),`\n`,(0,e.jsx)(n.p,{children:\"We use it to understand how your project is set up and how to generate components customized for your project.\"}),`\n`,(0,e.jsx)(r,{className:\"mt-6\",children:(0,e.jsxs)(n.p,{children:[\"Note: The \",(0,e.jsx)(n.code,{children:\"components.json\"}),\" file is optional and \",(0,e.jsx)(n.strong,{children:`only required if you're\\r\nusing the CLI`}),` to add components to your project. If you're using the copy\\r\nand paste method, you don't need this file.`]})}),`\n`,(0,e.jsxs)(n.p,{children:[\"You can create a \",(0,e.jsx)(n.code,{children:\"components.json\"}),\" file in your project by running the following command:\"]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-bash\",children:`npx shadcn@latest init\n`})}),`\n`,(0,e.jsxs)(n.p,{children:[\"See the \",(0,e.jsx)(a,{href:\"/docs/cli\",children:\"CLI section\"}),\" for more information.\"]}),`\n`,(0,e.jsxs)(n.h2,{id:\"schema\",children:[(0,e.jsx)(n.a,{\"aria-hidden\":\"true\",tabIndex:\"-1\",href:\"#schema\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),\"$schema\"]}),`\n`,(0,e.jsxs)(n.p,{children:[\"You can see the JSON Schema for \",(0,e.jsx)(n.code,{children:\"components.json\"}),\" \",(0,e.jsx)(n.a,{href:\"https://ui.shadcn.com/schema.json\",children:\"here\"}),\".\"]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-json\",children:`{\\r\n  \"$schema\": \"https://ui.shadcn.com/schema.json\"\\r\n}\n`})}),`\n`,(0,e.jsxs)(n.h2,{id:\"style\",children:[(0,e.jsx)(n.a,{\"aria-hidden\":\"true\",tabIndex:\"-1\",href:\"#style\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),\"style\"]}),`\n`,(0,e.jsxs)(n.p,{children:[\"The style for your components. \",(0,e.jsx)(n.strong,{children:\"This cannot be changed after initialization.\"})]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-json\",children:`{\\r\n  \"style\": \"default\" | \"new-york\"\\r\n}\n`})}),`\n`,(0,e.jsx)(o,{name:\"card-with-form\"}),`\n`,(0,e.jsxs)(n.h2,{id:\"tailwind\",children:[(0,e.jsx)(n.a,{\"aria-hidden\":\"true\",tabIndex:\"-1\",href:\"#tailwind\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),\"tailwind\"]}),`\n`,(0,e.jsx)(n.p,{children:\"Configuration to help the CLI understand how Tailwind CSS is set up in your project.\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"See the \",(0,e.jsx)(a,{href:\"/docs/installation\",children:\"installation section\"}),\" for how to set up Tailwind CSS.\"]}),`\n`,(0,e.jsxs)(n.h3,{id:\"tailwindconfig\",children:[(0,e.jsx)(n.a,{\"aria-hidden\":\"true\",tabIndex:\"-1\",href:\"#tailwindconfig\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),\"tailwind.config\"]}),`\n`,(0,e.jsxs)(n.p,{children:[\"Path to where your \",(0,e.jsx)(n.code,{children:\"tailwind.config.js\"}),\" file is located.\"]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-json\",children:`{\\r\n  \"tailwind\": {\\r\n    \"config\": \"tailwind.config.js\" | \"tailwind.config.ts\"\\r\n  }\\r\n}\n`})}),`\n`,(0,e.jsxs)(n.h3,{id:\"tailwindcss\",children:[(0,e.jsx)(n.a,{\"aria-hidden\":\"true\",tabIndex:\"-1\",href:\"#tailwindcss\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),\"tailwind.css\"]}),`\n`,(0,e.jsx)(n.p,{children:\"Path to the CSS file that imports Tailwind CSS into your project.\"}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-json\",children:`{\\r\n  \"tailwind\": {\\r\n    \"css\": \"styles/global.css\"\\r\n  }\\r\n}\n`})}),`\n`,(0,e.jsxs)(n.h3,{id:\"tailwindbasecolor\",children:[(0,e.jsx)(n.a,{\"aria-hidden\":\"true\",tabIndex:\"-1\",href:\"#tailwindbasecolor\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),\"tailwind.baseColor\"]}),`\n`,(0,e.jsxs)(n.p,{children:[\"This is used to generate the default color palette for your components. \",(0,e.jsx)(n.strong,{children:\"This cannot be changed after initialization.\"})]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-json\",children:`{\\r\n  \"tailwind\": {\\r\n    \"baseColor\": \"gray\" | \"neutral\" | \"slate\" | \"stone\" | \"zinc\"\\r\n  }\\r\n}\n`})}),`\n`,(0,e.jsxs)(n.h3,{id:\"tailwindcssvariables\",children:[(0,e.jsx)(n.a,{\"aria-hidden\":\"true\",tabIndex:\"-1\",href:\"#tailwindcssvariables\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),\"tailwind.cssVariables\"]}),`\n`,(0,e.jsx)(n.p,{children:\"You can choose between using CSS variables or Tailwind CSS utility classes for theming.\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"To use utility classes for theming set \",(0,e.jsx)(n.code,{children:\"tailwind.cssVariables\"}),\" to \",(0,e.jsx)(n.code,{children:\"false\"}),\". For CSS variables, set \",(0,e.jsx)(n.code,{children:\"tailwind.cssVariables\"}),\" to \",(0,e.jsx)(n.code,{children:\"true\"}),\".\"]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-json\",children:`{\\r\n  \"tailwind\": {\\r\n    \"cssVariables\": \\`true\\` | \\`false\\`\\r\n  }\\r\n}\n`})}),`\n`,(0,e.jsxs)(n.p,{children:[\"For more information, see the \",(0,e.jsx)(a,{href:\"/docs/theming\",children:\"theming docs\"}),\".\"]}),`\n`,(0,e.jsxs)(n.p,{children:[(0,e.jsx)(n.strong,{children:\"This cannot be changed after initialization.\"}),\" To switch between CSS variables and utility classes, you'll have to delete and re-install your components.\"]}),`\n`,(0,e.jsxs)(n.h3,{id:\"tailwindprefix\",children:[(0,e.jsx)(n.a,{\"aria-hidden\":\"true\",tabIndex:\"-1\",href:\"#tailwindprefix\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),\"tailwind.prefix\"]}),`\n`,(0,e.jsx)(n.p,{children:\"The prefix to use for your Tailwind CSS utility classes. Components will be added with this prefix.\"}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-json\",children:`{\\r\n  \"tailwind\": {\\r\n    \"prefix\": \"tw-\"\\r\n  }\\r\n}\n`})}),`\n`,(0,e.jsxs)(n.h2,{id:\"rsc\",children:[(0,e.jsx)(n.a,{\"aria-hidden\":\"true\",tabIndex:\"-1\",href:\"#rsc\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),\"rsc\"]}),`\n`,(0,e.jsx)(n.p,{children:\"Whether or not to enable support for React Server Components.\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"The CLI automatically adds a \",(0,e.jsx)(n.code,{children:\"use client\"}),\" directive to client components when set to \",(0,e.jsx)(n.code,{children:\"true\"}),\".\"]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-json\",children:'{\\r\\n  \"rsc\": `true` | `false`\\r\\n}\\n'})}),`\n`,(0,e.jsxs)(n.h2,{id:\"tsx\",children:[(0,e.jsx)(n.a,{\"aria-hidden\":\"true\",tabIndex:\"-1\",href:\"#tsx\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),\"tsx\"]}),`\n`,(0,e.jsx)(n.p,{children:\"Choose between TypeScript or JavaScript components.\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"Setting this option to \",(0,e.jsx)(n.code,{children:\"false\"}),\" allows components to be added as JavaScript with the \",(0,e.jsx)(n.code,{children:\".jsx\"}),\" file extension.\"]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-json\",children:'{\\r\\n  \"tsx\": `true` | `false`\\r\\n}\\n'})}),`\n`,(0,e.jsxs)(n.h2,{id:\"aliases\",children:[(0,e.jsx)(n.a,{\"aria-hidden\":\"true\",tabIndex:\"-1\",href:\"#aliases\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),\"aliases\"]}),`\n`,(0,e.jsxs)(n.p,{children:[\"The CLI uses these values and the \",(0,e.jsx)(n.code,{children:\"paths\"}),\" config from your \",(0,e.jsx)(n.code,{children:\"tsconfig.json\"}),\" or \",(0,e.jsx)(n.code,{children:\"jsconfig.json\"}),\" file to place generated components in the correct location.\"]}),`\n`,(0,e.jsxs)(n.p,{children:[\"Path aliases have to be set up in your \",(0,e.jsx)(n.code,{children:\"tsconfig.json\"}),\" or \",(0,e.jsx)(n.code,{children:\"jsconfig.json\"}),\" file.\"]}),`\n`,(0,e.jsx)(r,{className:\"mt-6\",children:(0,e.jsxs)(n.p,{children:[(0,e.jsx)(n.strong,{children:\"Important:\"}),\" If you're using the \",(0,e.jsx)(n.code,{children:\"src\"}),` directory, make sure it is included\\r\nunder `,(0,e.jsx)(n.code,{children:\"paths\"}),\" in your \",(0,e.jsx)(n.code,{children:\"tsconfig.json\"}),\" or \",(0,e.jsx)(n.code,{children:\"jsconfig.json\"}),\" file.\"]})}),`\n`,(0,e.jsxs)(n.h3,{id:\"aliasesutils\",children:[(0,e.jsx)(n.a,{\"aria-hidden\":\"true\",tabIndex:\"-1\",href:\"#aliasesutils\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),\"aliases.utils\"]}),`\n`,(0,e.jsx)(n.p,{children:\"Import alias for your utility functions.\"}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-json\",children:`{\\r\n  \"aliases\": {\\r\n    \"utils\": \"@/lib/utils\"\\r\n  }\\r\n}\n`})}),`\n`,(0,e.jsxs)(n.h3,{id:\"aliasescomponents\",children:[(0,e.jsx)(n.a,{\"aria-hidden\":\"true\",tabIndex:\"-1\",href:\"#aliasescomponents\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),\"aliases.components\"]}),`\n`,(0,e.jsx)(n.p,{children:\"Import alias for your components.\"}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-json\",children:`{\\r\n  \"aliases\": {\\r\n    \"components\": \"@/components\"\\r\n  }\\r\n}\n`})}),`\n`,(0,e.jsxs)(n.h3,{id:\"aliasesui\",children:[(0,e.jsx)(n.a,{\"aria-hidden\":\"true\",tabIndex:\"-1\",href:\"#aliasesui\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),\"aliases.ui\"]}),`\n`,(0,e.jsxs)(n.p,{children:[\"Import alias for \",(0,e.jsx)(n.code,{children:\"ui\"}),\" components.\"]}),`\n`,(0,e.jsxs)(n.p,{children:[\"The CLI will use the \",(0,e.jsx)(n.code,{children:\"aliases.ui\"}),\" value to determine where to place your \",(0,e.jsx)(n.code,{children:\"ui\"}),\" components. Use this config if you want to customize the installation directory for your \",(0,e.jsx)(n.code,{children:\"ui\"}),\" components.\"]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-json\",children:`{\\r\n  \"aliases\": {\\r\n    \"ui\": \"@/app/ui\"\\r\n  }\\r\n}\n`})}),`\n`,(0,e.jsxs)(n.h3,{id:\"aliaseslib\",children:[(0,e.jsx)(n.a,{\"aria-hidden\":\"true\",tabIndex:\"-1\",href:\"#aliaseslib\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),\"aliases.lib\"]}),`\n`,(0,e.jsxs)(n.p,{children:[\"Import alias for \",(0,e.jsx)(n.code,{children:\"lib\"}),\" functions such as \",(0,e.jsx)(n.code,{children:\"format-date\"}),\" or \",(0,e.jsx)(n.code,{children:\"generate-id\"}),\".\"]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-json\",children:`{\\r\n  \"aliases\": {\\r\n    \"lib\": \"@/lib\"\\r\n  }\\r\n}\n`})}),`\n`,(0,e.jsxs)(n.h3,{id:\"aliaseshooks\",children:[(0,e.jsx)(n.a,{\"aria-hidden\":\"true\",tabIndex:\"-1\",href:\"#aliaseshooks\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),\"aliases.hooks\"]}),`\n`,(0,e.jsxs)(n.p,{children:[\"Import alias for \",(0,e.jsx)(n.code,{children:\"hooks\"}),\" such as \",(0,e.jsx)(n.code,{children:\"use-media-query\"}),\" or \",(0,e.jsx)(n.code,{children:\"use-toast\"}),\".\"]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-json\",children:`{\\r\n  \"aliases\": {\\r\n    \"hooks\": \"@/hooks\"\\r\n  }\\r\n}\n`})})]})}function p(i={}){let{wrapper:n}=i.components||{};return n?(0,e.jsx)(n,{...i,children:(0,e.jsx)(h,{...i})}):h(i)}function c(i,n){throw new Error(\"Expected \"+(n?\"component\":\"object\")+\" `\"+i+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return x(I);})();\n;return Component;"
  },
  "_id": "docs/component-json.mdx",
  "_raw": {
    "sourceFilePath": "docs/component-json.mdx",
    "sourceFileName": "component-json.mdx",
    "sourceFileDir": "docs",
    "contentType": "mdx",
    "flattenedPath": "docs/component-json"
  },
  "type": "Doc",
  "slug": "/docs/component-json",
  "slugAsParams": "component-json"
}